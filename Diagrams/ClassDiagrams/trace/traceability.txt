The nature of Order's requires a vary particular type of asynchronous handling.  Lucky for us we were able to find a ruby gem that makes this messy process quite elegant.  Resque allows one to queue up tasks and execute them in "first in first out"(FIFO) order by dequeueing the next enabled task inline and performing it.  For our application we need to be able to wait before processing certain orders based on their dependencies and characteristics.  Rather then have a different datatype and handler for every type of order, we took the approach to consolidate all order types into a single order datatype that has a field that specifies the transactionType.  The orderHandler can be considered more of a rapper function as it checks the transactionType of the order it is to perform and send it off to be handled uniquely based on the checked value.  While market orders, are executed almost immediately after being placed, stop and limit orders may not be executed for quite some time.  The userSumm Whenever a task needs to be performed asynchronously, the task is entered into a designated portion of a Redis database, confgured as a queue. Background "workers" (processes) perform tasks as they arrive. Tasks can also be scheduled to occur at specifc times or intervals. In this way, everything from polling the datastream for stock updates to performing scheduled updates and e-mails can be coordinated by a single system.

